class ProjectContent:
	def website(self):
		return """<p> Currently this website is my biggest ongoing project. It is actually a culmination of all of my "Smart Everything" work, because the admin page of this site controls many of the smart devices in my life.
		I think that the site is really cool, because it's basically my playground for figuring out how to run a site. I've work with html and CSS , and even python before, but never all together.</p>
		<p> I really don't like PHP, but I also didn't like the idea of 
		writing a ton of static web pages, and having to update like 30 different pages whenever I wanted to change the style of the header, or add a new button ,so I decided to use python to generate dynamic html pages. This is something that I wonder if there is a better way to do it, but I have really enjoyed building it out this way. 
		<p> right now the site works by reading a file that has the content for the subheadings ( the page you're currently on is in the project subheading). the file is just a bunch of functions. then there is a function that adds the header, the stylesheet, and the image at the top automatically, by using a very specific style guide ( the title of the article, the name of the picture, and the url and always going to be the same) it's not super flexible, and there's probably a chance that it's possible to run some XSS on the page, but I think it's at least cool, and it was fun to set up.</p>
		<p> Eventually I want to add lots of other things, like a database to hold content, and allow readers to comment, and even have accounts, but for now the site, as it currently is, is enough work for me. </p>
		<p> If you know anything about making your own websites, and want to send me some advice at ethan@esmithy.net, I'd appreciate it! For now I'm learning by jumping in, and trying things. 
		"""
	def smartEverything(self):
		return """<p>The first time I heard of a "raspberry pi", a tiny computer that you can use to do just about anything you
		can think of, assuming you have the technical skills, I was sold. I first heard about it from my first programming professor at BYUI, who talked about using it to control his garage door from his phone, and I went home on the day of the lecture, and bought myself one.</p>
		I think the fact that you can buy a product, ( or products ) to make things in your house work for you automatically is the coolest thing ever. and the only thing cooler than being able to turn my lights on from my phone (from anywhere in the world with an internet connection), is to know how it works.
		I love building systems that will switch the lights, or turn on heat, or even open and close the blinds at will. and it's really cool to understand the mechanics behind it. When I was first starting out, I had no idea how most of the technology that I am currently using worked, and so I had to use simpler systems. 
		My very first automatic system was a email reader. you would send an email to ethansmithmailserver@gmail.com ( or something like that), and the bot would read the emails, looking for specific messages, formatted like html,
		with messages like {say} Hello {/say} which would use espeak to read out a message in the room where the RPI was, or {weather} to read out the weather, and {play}songtitle{/play} to play a song from the 4 song library I had uploaded to the device. 
		<p> When I was living at home between BYUI and SUU I really got into more detail with my technologies, upgrading from email to a basic python "simple CGI " web server, and finally upgrading to Flask ( with some help from my dad) which this site is currently running on. I moved from reading out messages with speakers, to turning on and off lights, (starting with a desk lamp, and moving up to the lights in my room, using a relay) and controling the
		heat with a servo motor, literally mounted to the knob on the thermostat (pictured). I think these projects have given me more useful technical skills than all of my first semester at SUU. From this project I learned some basics about web servers, and programming, and Unix based operation systems, and hardware troubleshooting, and basic electrical engineering (very basic). 
		<p> one of the tragedies of living in an apartment is that I am somewhat limited to the scale of projects that I can undertake. I don't want to be drilling holes in the wall to mount motors to automate opening and closing blinds, or mounting a smart lock on my door, considering that I'll be moving out of the house in a couple of months. But in the future I have lots of ideas for really cool projects to undertake, once I'm somewhere a bit more permanent.
		<p> Home automation has really been life changing for me, and I think that working on a project is the best way to learn, just find something you want to do, and do it, you'll probably learn a lot along the way, and have a lot of fun.
		"""
	def automation(self):
		return """<p> If I could write a shell script to go to school for me, I probably would. </p>
		<p> I've had classes that I considered trying to write scripts to generate content for, ( for example my E-commerce class, I'm not sure that the grader even read our essays, because I would always get 100% on them, even when I would write off the main topic discussed. (but that's a bit of a tangent) What I'm trying to say, is that there is a lot of things in our life that can be automated, and I love how you can make your life simpler, or cooler with just a few keypresses and a nice shebang</p>
		<p> TODO : write a script to write the rest of this article for me.</p>
		"""
	def schoolwork(self):
		return """<p> School is filled with requirements to do lots of things, so on this page I'll write about some of the cooler, or more interesting things that I think I've done to complete various assignments</p>
		<p>I've used github for a long time, so most of my projects are up there, and I can link them as well, so that's pretty nice.</p>
		<p> The first time I really felt like I went above and beyond was for my BYUI CS101 class. The professor "taught" us python, by basically having us follow the codeAcademy course, and then had us do a "final prject" of our choosing. Me and my cousin Jared Wrathall ( who was a senior at the time, and probably did most of the heavy lifing) made a simple text adventure game, where you move around a map made of X's, looking for enemies, and gaing loot, through randomized, pokemon style text based encounters. I felt pretty good about the project, until I looked at what other people were doing, and realized that we could have just made a basic calculator or something, but either way, it was fun to make, and I enjoyed going all out for a project, and that attitude has stuck with me for all my programming classes.
		You can check out the source code <a href = "https://github.com/ddrgrevious/textadventure"> Right here </a></p>
		<p> The second "big for it's time" project I did was in my BYUI CIT160 javascript programming class. Our teacher showed us how to draw in a screen, and I realized that I could update that screen, by redrawing the screen (and discovering basic animation), and so I decided to use this technique to recreate the classic "Pong" game in javascript. 
		It was really interesting for me, because it taught me a lot about game design, ( like how a game loop works, and variable scope), as well as how useful functions really are. and as a bonus the class was really impressed, because it was a very simple class, and most of the rest of the projects weren't even graphical in nature. I have that source code ( or most of it anyways) up on my github <a href="https://github.com/urd000med/urd000med_pong"> Right here </a></p>
		<p> I wasn't really engaged in my first programming class at SUU, which I didn't think I should have even been in, but was anyway, because my adviser disagreed with me ( she was and still is wrong ), so when it was suggested that we would be working on a giant final project for half the semester I decided that I was going to make something crazy. This class had a similar scope to my last one, with nothing crazy going on , and so I decided to follow pong, with Asteroids. This ended up being quite a large commitment of time, and energy, as it was the largest project I had ever undertaken, and there was lots of objects working with each other, plus it was written in java, a language that, until that semester, I had no experience with. 
		The project ended up turning out pretty good, with the basic mechanics working fine, although there is more that I would have wanted to add, if I had more time, and energy, (like the asteroids splitting into smaller asteroids when hit, or a prettier loading screen ) <a href = "https://github.com/urd000med/1400final"> You can view the java code here </a></p><br>
		<p> Hopefully I'll have some more crazy projects to write about here later, but until then, this is is!</p>		
		"""

